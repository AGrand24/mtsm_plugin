












# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MTSMDialog
								 A QGIS plugin
 MT survey manager
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							 -------------------
		begin                : 2025-04-04
		git sha              : $Format:%H$
		copyright            : (C) 2025 by Adam Grand
		email                : adam.grand@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""



from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QPushButton
from qgis.core import QgsProject,QgsLayoutExporter,QgsRenderContext
from PyPDF2 import PdfMerger


import os
import subprocess
import sys
from datetime import date
def change_dir(folder):
	dir_qgis=QgsProject.instance().homePath()
	dir_project=dir_qgis.replace("MTSM_qgis","").replace("/","\\")
	dir_scripts=(dir_qgis+'/scripts/').replace("/","\\")
	if folder=='qgis':
		os.chdir(dir_qgis)
	elif folder=='project':
		os.chdir(dir_project)
	elif folder=='scripts':
		os.chdir(dir_scripts)
	
	return [dir_project,dir_qgis,dir_scripts]
	# print(f'Changed CWD to {dir_qgis}\\scripts\\')

def run_script():
	with open("MTSM_qgis/scripts/MTSM_tools.py") as file:
				exec(file.read())
				file.close()





# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
	os.path.dirname(__file__), 'MTSM_dialog_base.ui'))


class MTSMDialog(QtWidgets.QDialog, FORM_CLASS):
	def __init__(self, parent=None):
		"""Constructor."""
		super(MTSMDialog, self).__init__(parent)
		# Set up the user interface from Designer through FORM_CLASS.
		# After self.setupUi() you can access any designer object by doing
		# self.<objectname>, and you can use autoconnect slots - see
		# http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
		# #widgets-and-dialogs-with-auto-connect
		self.setupUi(self)
		dir=change_dir('project')[0]

		self.load_values()

		self.de_report_date.setDate(date.today())
		self.value_de_report_date=self.de_report_date.date()

		self.pb_clean_project.clicked.connect(self.clear_project)
		self.pb_import_rec.clicked.connect(self.run_import_rec)
		self.pb_import_sites_csv.clicked.connect(self.run_import_sites_csv)
		self.pb_export_backup.clicked.connect(self.export_backups)
		self.pb_qc_sensor_pos.clicked.connect(self.run_qc_sensor_pos)
		self.pb_run_processing.clicked.connect(self.run_processing)
		self.pb_dump_to_csv.clicked.connect(self.run_dump_to_csv)
		self.pb_qc_checks.clicked.connect(self.run_qc_checks)
		self.pb_replot_edi.clicked.connect(self.run_replot_edi)
		self.pb_export_report.clicked.connect(self.run_export_report)
		self.pb_generate_report.clicked.connect(self.run_generate_report)
		self.pb_install_packages.clicked.connect(self.run_install_py_packages)

		
		self.rb_xml_read_full.toggled.connect(self.xml_full_reload)
		self.rb_xml_read_smart.toggled.connect(self.xml_smart_reload)
		
		self.sb_radius_search.valueChanged.connect(self.sb_radius_search_changed)
		self.sb_tl_range.valueChanged.connect(self.sb_tl_range_changed)
		self.sb_tl_page_range.valueChanged.connect(self.sb_tl_page_range_changed)
		self.de_report_date.dateChanged.connect(self.de_report_date_changed)

		self.value_xml_reload_type='smart'
		self.write_values()

	def load_values(self):
		try:
			with open('search_radius.txt','r') as file:
				self.sb_radius_search.setValue(int(file.read().strip()))
				
		except:
				self.sb_radius_search.setValue(100)
		try:
			with open('tl_range.txt','r') as file:
				self.sb_tl_range.setValue(int(file.read().strip()))
		except:
				self.sb_tl_range.setValue(2)
		try:
			with open('tl_page_range.txt','r') as file:
				self.sb_tl_page_range.setValue(int(file.read().strip()))
		except:
				self.sb_tl_page_range.setValue(2)
		
		self.value_search_radius=self.sb_radius_search.value()
		self.value_tl_range=self.sb_tl_range.value()
		self.value_tl_page_range=self.sb_tl_page_range.value()
		
		return self

	def write_values(self):
		with open('xml_reload_type.txt','w') as file:
			file.write(str(self.value_xml_reload_type))
		with open('search_radius.txt','w') as file:
			file.write(str(self.sb_radius_search.value()))

		with open('tl_range.txt','w') as file:
			file.write(str(self.value_tl_range))

		with open('tl_page_range.txt','w') as file:
			file.write(str(self.value_tl_page_range))

		with open('report_date.txt','w') as file:
			file.write(self.value_de_report_date.toString("yyyy-MM-dd") )
	
	def clear_project(self):
		reply= QtWidgets.QMessageBox.question(self,'Clean project','This will delete all Rec and Xml data and reload clean project. Are you sure?',
		QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,QtWidgets.QMessageBox.No)
		
		if reply== QtWidgets.QMessageBox.Yes:
			dir=change_dir('scripts')[2]
			path=(dir+'run_create_project.py')

			print(f"explorer {path}")
			subprocess.Popen(f"explorer {path}")
		else:
			print('NO')


	def run_import_rec(self):
		dir=change_dir('project')[0]
		fpath, filter = QtWidgets.QFileDialog.getOpenFileName(self, 'Choose file', 'MTSM_qgis\\rec_import_export', 'REC data (*.rec)')
		print(fpath)
		if fpath:
			with open('fp_rec.txt','w') as file:
				file.write(fpath)
			dir=change_dir('scripts')[2]
			path=(dir+'run_import_rec.py')
			subprocess.Popen(f"explorer {path}")
			dir=change_dir('project')[0]

	def run_import_sites_csv(self):
		dir=change_dir('project')[0]
		fpath, filter = QtWidgets.QFileDialog.getOpenFileName(self, 'Choose file', '', 'csv (*.csv)')
		print(fpath)
		if fpath:
			with open('fp_sites_csv.txt','w') as file:
				file.write(fpath)
			dir=change_dir('scripts')[2]
			path=(dir+'run_import_sites_csv.py')
			subprocess.Popen(f"explorer {path}")
			dir=change_dir('project')[0]

	def export_backups(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_export_backup.py')
		subprocess.Popen(f"explorer {path}")

	def xml_full_reload(self):
		self.value_xml_reload_type='full'
		print(self.value_xml_reload_type)

	def xml_smart_reload(self):
		self.value_xml_reload_type='smart'
		print(self.value_xml_reload_type)

	def run_processing(self):
		dir=change_dir('project')[0]
		with open('xml_reload_type.txt','w') as file:
			file.write(self.value_xml_reload_type)
		dir=change_dir('scripts')[2]
		path=(dir+'run_main_proc.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]
	
	def sb_radius_search_changed(self):
		dir=change_dir('project')[0]
		self.value_search_radius = self.sb_radius_search.value()
		with open('search_radius.txt','w') as file:
			file.write(str(self.value_search_radius))

	def sb_tl_range_changed(self):
		dir=change_dir('project')[0]
		self.value_tl_range = self.sb_tl_range.value()
		with open('tl_range.txt','w') as file:
			file.write(str(self.value_tl_range))
	
	def sb_tl_page_range_changed(self):
		dir=change_dir('project')[0]
		self.value_tl_page_range = self.sb_tl_page_range.value()
		with open('tl_page_range.txt','w') as file:
			file.write(str(self.value_tl_page_range))

	def de_report_date_changed(self):
		dir=change_dir('project')[0]
		self.value_de_report_date = self.de_report_date.date()
		with open('report_date.txt','w') as file:
			file.write(str(self.value_de_report_date.toString("yyyy-MM-dd")))
	
	def run_qc_sensor_pos(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_check_sensor_pos.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]

	def run_dump_to_csv(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_dump_csv.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]

	def run_qc_checks(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_qc.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]

	def run_replot_edi(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_replot_edi.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]

	def run_generate_report(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_report.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]

	def run_install_py_packages(self):
		dir=change_dir('scripts')[2]
		path=(dir+'run_install_packages.py')
		subprocess.Popen(f"explorer {path}")
		dir=change_dir('project')[0]
	
	def run_export_report(self):
		dir=change_dir('project')[0]
		pdf_partial=[]
		pdf_partial=report_export_layout('mtsm_report_header',pdf_partial)
		try:
			pdf_partial=report_export_atlas('mtsm_report_map',pdf_partial)
		except:
			pdf_partial=report_export_layout('mtsm_report_map',pdf_partial)
		if self.cb_report_timeline.isChecked():
			pdf_partial=report_export_atlas('mtsm_report_timeline',pdf_partial)
		pdf_partial=report_export_atlas('mtsm_report_db',pdf_partial)
		pdf_partial=report_export_layout('mtsm_report_eq_prs',pdf_partial)
		pdf_partial=report_export_atlas('mtsm_report_pd',pdf_partial)

		self.merge_pdf(pdf_partial)
		self.msg_box_report()


	def msg_box_report(self):
		msg_box = QMessageBox()
		msg_box.setIcon(QMessageBox.Information)
		msg_box.setWindowTitle("Export finished!")
		msg_box.setText("Open pdf file?")
		msg_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
		response = msg_box.exec_()
		if response == QMessageBox.Ok:
			path=(f'reports\\mtsm_report{str(self.value_de_report_date.toString("_yyyy-MM-dd"))}.pdf')
			subprocess.Popen(f"explorer {path}")

	def merge_pdf(self,pdf_partial):
		output_file=f'reports\\mtsm_report{str(self.value_de_report_date.toString("_yyyy-MM-dd"))}.pdf'
		merger = PdfMerger()

		for pdf in pdf_partial:
			merger.append(pdf)

		merger.write(output_file)
		merger.close()

def report_export_layout(layout_name,pdf_partial):
	manager = QgsProject.instance().layoutManager()
	layout = manager.layoutByName(layout_name)
	exporter = QgsLayoutExporter(layout)
	pdf_settings=report_get_pdf_settings()
	fp_out = f'tmp/rp_{layout_name}.pdf'
	exporter.exportToPdf(fp_out,pdf_settings)
	pdf_partial.append(fp_out)
	return pdf_partial


def report_export_atlas(layout_name,pdf_partial):
	project = QgsProject.instance()
	layout = project.layoutManager().layoutByName(layout_name)
	atlas=layout.atlas()
	exporter = QgsLayoutExporter(atlas.layout())
	fp_out = f'tmp/rp_{layout_name}.pdf'
	pdf_settings=report_get_pdf_settings()
	exporter.exportToPdf(atlas, fp_out, pdf_settings)
	pdf_partial.append(fp_out)
	return pdf_partial
#

def report_get_pdf_settings():
	pdf_settings = QgsLayoutExporter.PdfExportSettings()
	pdf_settings.forceVectorOutput = False
	pdf_settings.exportMetadata = False # default True
	pdf_settings.rasterizeWholeImage = False # default False
	pdf_settings.textRenderFormat = QgsRenderContext.TextFormatAlwaysText
	return pdf_settings



